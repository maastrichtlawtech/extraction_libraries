name: Build, Test, Lint & Upload to TestPyPI and PyPI for Cellar_Extractor

on:
  push:
    branches: [ cellar ]
  pull_request:
    branches: [ cellar ]
env:
  RELEASE_VERSION: 1.2.0

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Lint with flake8
        uses: py-actions/flake8@v2
        with:
          ignore: E501,F401
          exclude: "tests"
          path: "cellar_extractor"
          plugins: "flake8-bugbear==22.1.11 flake8-black"

      
  test:
    if: github.event_name == 'pull_request'
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel pytest pytest-cov
          pip install -r requirements.txt
          
      
      - name: Install package for testing
        run: |
          pip install -e .

      - name: Run tests with pytest
        run: |
          pytest tests/test_cellar.py --doctest-modules --junitxml=junit/test-results.xml --cov=cellar_extractor --cov-report=xml --cov-report=html

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel build

      - name: Build package
        run: |
          python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  testpypi-publish:
    if: github.event_name == 'pull_request'
    name: Publish to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/project/cellar-extractor/
    permissions:
      id-token: write

    steps:
      - name: Download all the artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/

  pypi-publish:
    if: github.event_name == 'push' && github.ref == 'refs/heads/cellar'
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/cellar-extractor/
    permissions:
      id-token: write

    steps:
      - name: Download all the artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Check if version is already published on PyPI
        id: check-version
        run: |
          if curl -s https://pypi.org/pypi/cellar-extractor/${{ env.RELEASE_VERSION }}/json; then
            echo "Version ${{ env.RELEASE_VERSION }} is already published on PyPI."
            echo "::set-output name=version_exists::true"
            exit 0
          else
            echo "Version ${{ env.RELEASE_VERSION }} is not published on PyPI."
            echo "::set-output name=version_exists::false"
          fi

      - name: Publish distribution to PyPI
        if: steps.check-version.outputs.version_exists != 'true'
        uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/cellar'
    name: Sign the Python distribution with Sigstore and upload them to GitHub Releases
    needs:
      - pypi-publish
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Download all the artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Sign the Python distribution with Sigstore
        uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Create Github release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          'cellar-extractor-${{ env.RELEASE_VERSION }}'
          --repo '${{ github.repository }}'
          --notes ""

      - name: Upload artifact signatures to Github release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload
          'cellar-extractor-${{ env.RELEASE_VERSION }}' ./dist/*.tar.gz ./dist/*.whl
          --repo '${{ github.repository }}'
